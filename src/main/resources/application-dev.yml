spring:
  datasource:
    url: jdbc:mysql://localhost:3306/{DB 이름}}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC&useLegacyDatetimeCode=false
    username: { DB 이름 }
    password: { DB 비밀번호 }
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    database: mysql
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-name: kakao
            client-id: ${KAKAO_CLIENT}
            client-secret: ${KAKAO_SECRET}
            redirect-uri: "http://localhost:8080/login/oauth2/code/kakao" # { baseUrl }/login/oauth2/code/kakao
            client-authentication-method: client_secret_post # kakao는 인증 토큰 발급 요청 메서드가 post이다. (최근 버전에는 작성 방법이 이렇게 바뀌었다.)
            authorization-grant-type: authorization_code
            scope: profile_nickname, profile_image, account_email # kakao 개인 정보 동의 항목 설정의 id 값(받아올 값)

          naver:
            client-name: naver
            client-id: ${NAVER_CLIENT}
            client-secret: ${NAVER_SECRET}
            redirect-uri: "http://localhost:8080/login/oauth2/code/naver"
            authorization-grant-type: authorization_code
            scope: name, email

        # kakao provider 설정
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id # 유저 정보 조회 시 반환되는 최상위 필드명으로 해야 한다.
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response # 유저 정보 조회 시 반환되는 최상위 필드명으로 해야 한다.